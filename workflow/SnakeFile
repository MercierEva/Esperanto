# -*- coding: utf-8 -*-
import os
import subprocess
import os
from Bio import SeqIO
import re
import gzip
import time
import pandas as pd
from scripts.py_scripts.math_calcul import Mathematica_1

def return_qual(input_file):
    proc = subprocess.Popen("cat " + input_file, shell=True, stdout=subprocess.PIPE)
    out, err = proc.communicate()
    qual = int(out)
    return qual

def filesCheck(wildcards):
    files = checkpoints.filtration.get(**wildcards).output[0]
    file_temp_qual=expand(config["folder"]+"07_stats/Temp/quality_{sample}.temp", sample=wildcards.sample)
    quality= return_qual(file_temp_qual[0])
    class_qual_init=Mathematica_1(quality)
    factor_a, factor_b = class_qual_init.return_factors()
    coverage_minim=class_qual_init.calcul_depth_min(config["params"]["quality_cons"], factor_a, factor_b)

    if count_seq(files) > int(coverage_minim):           
        pass_list=[]
        pass_list = expand(config["folder"]+"07_stats/report_{sample}_final.tsv", sample= wildcards.sample ) + expand(config["folder"]+"03_porechop/{sample}_ont.fasta", sample =wildcards.sample ) + expand(config["folder"]+"06_seq_inform/{sample}_SCAN.fa", sample=wildcards.sample)
        return pass_list
    else:     
        return expand(config["folder"]+"07_stats/Temp/{sample}_state.temp", sample=wildcards.sample)


configfile : "config_wf.yaml"
include: "rule_workflow.smk"

onsuccess:
    print("Le workflow est fini; vous pouvez récupérer les fasta ci-dessous")
    shell("rm .snakemake/log/*")

onerror:
    print("Le workflow ne s'est pas déroulé comme prévu...")



rule all:
    input:
        expand(config["folder"]+"07_stats/Temp/{sample}_finished.temp", sample=config["samples"]),
               

